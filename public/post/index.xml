<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Joy of Analysis</title>
    <link>/post/</link>
    <description>Recent content in Posts on The Joy of Analysis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>G</copyright>
    <lastBuildDate>Sun, 03 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mapping Alternative Fuel Station Locations</title>
      <link>/2019/11/03/2019-11-03-mapping-alternative-fuel-station-locations/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/03/2019-11-03-mapping-alternative-fuel-station-locations/</guid>
      <description>Load needed libraries library(tidyverse) library(janitor) # cleans column names library(USAboundaries) # Download shape files library(sf) # Used for spatial opperations library(lubridate) library(gganimate) This data comes from https://data.ca.gov/dataset/alternative-fuel-station-locations/resource/843e18ca-7a96-4485-a9fe-1ecdd9bbb9b5
df &amp;lt;- read_csv(&amp;#39;https://data.ca.gov/dataset/d2136de9-4b98-49f5-b076-022a046cd894/resource/843e18ca-7a96-4485-a9fe-1ecdd9bbb9b5/download/alternative-fuel-station-locations.csv&amp;#39;) %&amp;gt;% clean_names() # get california shapefile from the USAboundaries package cali &amp;lt;- us_states(resolution = &amp;quot;high&amp;quot;, states = &amp;quot;CA&amp;quot;) # Clean up the gas station data and cast as a sf object electric &amp;lt;- df %&amp;gt;% filter(fuel_type_code == &amp;quot;ELEC&amp;quot;) %&amp;gt;% filter(!</description>
    </item>
    
    <item>
      <title>tidytuesday - car fuel economy</title>
      <link>/2019/10/15/2019-10-15-tidytuesday-car-fuel-economy/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/15/2019-10-15-tidytuesday-car-fuel-economy/</guid>
      <description> Load the packages and data! library(tidyverse) library(viridis) cars &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-15/big_epa_cars.csv&amp;quot;)  Clean the data and plot it big_makers &amp;lt;- cars %&amp;gt;% select(make, model, year, UCity,UHighway) %&amp;gt;% group_by(make) %&amp;gt;% tally() %&amp;gt;% arrange(-n) %&amp;gt;% head(30) %&amp;gt;% pull(make) cars_clean &amp;lt;- cars %&amp;gt;% select(make, model, year, UCity,UHighway) %&amp;gt;% filter(make %in% big_makers) cars_heat &amp;lt;- cars_clean %&amp;gt;% group_by(make, year) %&amp;gt;% filter(!is.na(UCity)) %&amp;gt;% summarise( mean = mean(UCity) ) ggplot(cars_heat, aes(x= year, y= make))+ geom_tile(aes(fill = mean))+ scale_fill_viridis(option = &amp;quot;magma&amp;quot;)+ theme_classic()+ labs(title = &amp;quot;Cars yearly mean MPG&amp;quot;, x= &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;)+ guides(fill=guide_legend(title=&amp;quot;Mean City MPG&amp;quot;))  </description>
    </item>
    
    <item>
      <title>tidytuesday - powerlifting</title>
      <link>/2019/10/14/2019-10-14-tidytuesday-powerlifting/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/14/2019-10-14-tidytuesday-powerlifting/</guid>
      <description> library(tidyverse) ggplot(mtcars, aes(x = mpg, y = hp))+ geom_point() + theme_classic() </description>
    </item>
    
  </channel>
</rss>